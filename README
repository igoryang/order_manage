python2


django

1,admin-django startproject    -->manage.py startapp  startproject

2，MVC  MTV   setting.py views.py urls.py

3,mysqly

4,admin models.Model

5,web   static templates html

6



2、连表结构  http://www.cnblogs.com/chenchao1990/p/5309890.html
http://blog.csdn.net/sundaydashu/article/details/7959977
Django中的Model（表结构）
Model(表设计)
一对多：models.ForeignKey(其他表)
多对多：models.ManyToManyField(其他表)
一对一：models.OneToOneField(其他表)
三 掌握一些常用的设置技巧

    list_display:     指定要显示的字段
    search_fields:  指定搜索的字段
    list_filter:        指定列表过滤器
    ordering：       指定排序字段

http://www.codeweblog.com/django-admin%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91-2-%E4%B9%8B-%E6%9F%A5%E7%9C%8B-%E8%BF%87%E6%BB%A4-%E6%90%9C%E7%B4%A2%E5%92%8C%E6%8E%92%E5%BA%8F/
django admin应用开发(2) 之 查看.过滤.搜索和排序
ModelAdmin是admin应用中最常用的一个类，最终效果都将在这个类中体现出来。总的来说，这个类可以完成以下功能：
逻辑实现
单个对象（object）的操作：创建（add）、修改（change）、删除（delete）
结果集（queryset）的操作：查看（display）、搜索（search）、过滤（filter）、分页（paginator）、排序（sort）



初始化mysql:   creater database order;   setttings.py  root/123.abc
c:\Python27\python.exe manage.py syncdb


更新数据库信息
Python27\python.exe manage.py makemigrations


c:\Python27\python.exe manage.py migrate

c:\Python27\python.exe manage.py runnserver 0.0.0.0 8001

admin-django startproject    -->manage.py startapp  startproject


http://djangobook.py3k.cn/

django admin模块 中文
http://blog.csdn.net/fengyu09/article/details/41677667
django admin模块 中文
http://lishiguang.iteye.com/blog/1328986
http://www.huangwenchao.com.cn/2014/02/django-tip-2.html
http://www.huangwenchao.com.cn/2014/02/django-tip-3.html

如果你觉得英文界面不好用，可以在setting.py 文件中修改以下选项

1
LANGUAGE_CODE = 'en-us'  #LANGUAGE_CODE = 'zh-hans'
一  认识ModelAdmin

   管理界面的定制类，如需扩展特定的model界面需从该类继承。

二 注册medel类到admin的两种方式：

     <1>   使用register的方法

1
admin.site.register(Book,MyAdmin)
     <2>   使用register的装饰器

1
@admin.register(Book)
三 掌握一些常用的设置技巧

    list_display:     指定要显示的字段
    search_fields:  指定搜索的字段
    list_filter:        指定列表过滤器
    ordering：       指定排序字段

from django.db import models

# Create your models here.

# Create your models here.


class Book(models.Model):
    name=models.CharField(max_length=20)
    price=models.IntegerField()
    pub_date=models.DateField()
    publish=models.ForeignKey("Publish")
    authors=models.ManyToManyField("Author")

    def __str__(self):
        return self.name

class Publish(models.Model):

    name=models.CharField(max_length=32)
    city=models.CharField(max_length=32)

    def __str__(self):
        return self.name


#class Book_Author(models.Model):
#    book=models.ForeignKey("Book")
#    author=models.ForeignKey("Author")


class Author(models.Model):

    name=models.CharField(max_length=32)
    age=models.IntegerField(default=20)

    def __str__(self):
        return self.name

request包含一些请求相关信息和数据返回不同的内容。常用见下表。
属性	类型	描述
path	string	路径，不含主机和端口
method	string	请求方法
GET/POST/REQUEST	dict	请求数据
user	User/AnonymousUser	当前登录用户对应的User对象或匿名用户对象


2、注册APP，settings添加app
3、生成相应的表
    python manage.py makemigrations
    python manage.py migrate


    4、admin后台注册表

    对数据进行增删改查
查
models.UserInfo.objects.all()
models.UserInfo.objects.all().values('user')    #只取user列
models.UserInfo.objects.all().values_list('id','user')    #取出id和user列，并生成一个列表
models.UserInfo.objects.get(id=1)
models.UserInfo.objects.get(user='yangmv')

http://lishiguang.iteye.com/blog/1328986
在blog文件夹下新建一个admin.py文件加入一下代码：

from django.contrib import admin
from djcms.apps.blog.models import Post, Category, Tag

admin.site.register(Post)
admin.site.register(Category)
admin.site.register(Tag)


===========================================================
创建一个Django项目，名为MyDjango

django-admin startproject MyDjango

创建一个Django应用，名为MyBlog。这里应该注意的是应用隶属于项目的子集。通俗的来说应用文件夹是作为项目文件夹的子集而存在的。

django-admin startapp MyBlog

MVC
数据库：
settings.py
# Database
DATABASES = {
 'default': {
  'ENGINE': 'django.db.backends.sqlite3',
  'NAME': 'MyBlog.db',
  'USER':'',
  'PASSWORD':'',
  'HOST':'',
  'PORT':'',
 }
}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'ip_db',
        'USER':'root',
        'PASSWORD':'root',
        'HOST':'localhost',
        'PORT':'3306',

    }
}



2. MVC/MTV介绍

　　MVC百度百科：全名Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。

　　通俗解释：一种文件的组织和管理形式！不要被缩写吓到了，这其实就是把不同类型的文件放到不同的目录下的一种方法，然后取了个高大上的名字。当然，它带来的好处有很多，比如前后端分离，松耦合等等，就不详细说明了。　　　　　　　

　　模型(model)：定义数据库相关的内容，一般放在models.py文件中。

　　视图(view)：定义HTML等静态网页文件相关，也就是那些html、css、js等前端的东西。

　　控制器(controller)：定义业务逻辑相关，就是你的主要代码。　　

　　MTV: 有些WEB框架觉得MVC的字面意思很别扭，就给它改了一下。view不再是HTML相关，而是主业务逻辑了，相当于控制器。html被放在Templates中，称作模板，于是MVC就变成了MTV。这其实就是一个文字游戏，和MVC本质上是一样的，换了个名字和叫法而已，换汤不换药



Django新手图文教程  http://www.cnblogs.com/Leo_wl/p/5824541.html

http://blog.csdn.net/hcx25909/article/details/21741607

http://blog.csdn.net/u013088062/article/details/50158239

Python之道1-环境搭建与pycharm的配置django安装及MySQL数据库配置   http://www.cnblogs.com/hwtmhj/p/6746151.html
=====================================================================

python django 数据库AND api 教程

http://www.cnblogs.com/yangmv/p/5327477.html

http://www.cnblogs.com/qingchengzi/p/6625783.html
http://www.cnblogs.com/qingchengzi/p/6872695.html


http://www.cnblogs.com/Eva-J/p/5139990.html
http://www.cnblogs.com/Eva-J/p/5152823.html

http://code.ziqiangxuetang.com/django/django-models.html

http://blog.csdn.net/erlang_hell/article/details/53155461

http://blog.csdn.net/yangheng816/article/details/52068469

http://blog.csdn.net/zez11/article/details/52253488

===============================================================
python3不再支持mysqldb 请用pymysql和mysql.connector
取而代之的是：

import pymysql

所以，大家pip起来吧。另外，mysql官方出了个mysql.connector，也可以用。

我这用的例子如下：

import pymysql
conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='test',
db='mysql')
cur = conn.cursor()
cur.execute("SELECT * FROM user")
for r in cur.fetchall():
           print(r)
           #cur.close()
conn.close()

=====================================================================

command:
Type 'manage.py help <subcommand>' for help on a specific subcommand.

Available subcommands:

[auth]
    changepassword
    createsuperuser

[django]
    check
    compilemessages
    createcachetable
    dbshell
    diffsettings
    dumpdata
    flush
    inspectdb
    loaddata
    makemessages
    makemigrations
    migrate
    runfcgi
    shell
    showmigrations
    sql
    sqlall
    sqlclear
    sqlcustom
    sqldropindexes
    sqlflush
    sqlindexes
    sqlmigrate
    sqlsequencereset
    squashmigrations
    startapp
    startproject
    syncdb
    test
    testserver
    validate

[sessions]
    clearsessions

[staticfiles]
    collectstatic
    findstatic
    runserver



=====================================================================
models mysql

"""
class userinfo(models.Model):
    #如果没有models.AutoField，默认会创建一个id的自增列
    name = models.CharField(max_length=30)
    email = models.EmailField()
    memo = models.TextField()

class User(models.Model):
    username = models.CharField('用户名',max_length=50)
    password = models.CharField('密码',max_length=255)
    email = models.EmailField('邮箱',null=True,blank=True)
    phone = models.CharField('电话',max_length=11,null=True,blank=True)

    group = models.ManyToManyField(UserGroup,verbose_name='用户组')

    create_date = models.DateTimeField('创建时间',auto_now_add=True)
    update_date = models.DateTimeField('最近修改时间',auto_now=True)


django 数据模型中 null=True 和 blank=True 区别

null：
    If True, Django will store empty values as NULL in the database. Default
is False.
    如果为True，空值将会被存储为NULL，默认为False。
blank：
    If True, the field is allowed to be blank. Default is False.
    如果为True，字段允许为空，默认不允许。
  null表示什么都没有，blank表示空白，null=True表示允许什么都没有，blank=True表示允许空白，空白不代表什么都没有，空白字符串就是空白的值；
其中，日期型、时间型和数字型字段不接受空字符串，如果插入空字符串则会出错，为了避免错误出现，我们可以运行它里面什么都没有，在Django模块中，可
以通过添加null=True来指定一个字段允许为NULL。日期型（DateField、TimeField、DateTimeField）或数字型（IntegerField、DecimalField、FloatField）字段为空，
你需要使用null=True  和blank=True。


========================================================================================================
django  models   admin   表  字段  汉化中文显示方法


models.Model类的内部类Meta，有两个特殊的选项：verbose_name和verbose_name_plural。顾名思义，verbose_name为model提供了一个更容易让人阅读
class Meta:
    verbose_name = u" 名称"
    verbose_name_plural = u"名称"


# coding:utf8
from django.db import models

class Category(models.Model):
    """
    文章分类
    """
    title = models.CharField('名称', max_length=100)        # 分类名称
    alias = models.CharField('别名', max_length=100)        # 分类别名（用于 url 优化）
    sort = models.SmallIntegerField('排序')                    # 排序

    class Meta:
        verbose_name = '分类'
        verbose_name_plural = '分类'
        ordering = ['sort']

    def __unicode__(self):
        return self.title

class Tag(models.Model):
    """
    文章标签
    """
    tagname = models.CharField('标签名', max_length=60)        # 标签名
    post_ids = models.TextField(editable=False)                # 对应的文章 id 集合的序列

    class Meta:
        verbose_name = '标签'
        verbose_name_plural = '标签'

    def __unicode__(self):
        return self.tagname


 ====================================       ===================================================================================================================







1、models.AutoField　　自增列= int(11)
　　如果没有的话，默认会生成一个名称为 id 的列，如果要显示的自定义一个自增列，必须将给列设置为主键 primary_key=True。
2、models.CharField　　字符串字段
　　必须 max_length 参数
3、models.BooleanField　　布尔类型=tinyint(1)
　　不能为空，Blank=True
4、models.ComaSeparatedIntegerField　　用逗号分割的数字=varchar
　　继承CharField，所以必须 max_lenght 参数
5、models.DateField　　日期类型 date
　　对于参数，auto_now =True则每次更新都会更新这个时间；auto_now_add 则只是第一次创建添加，之后的更新不再改变。
6、models.DateTimeField　　日期类型 datetime
　　同DateField的参数
7、models.Decimal　　十进制小数类型= decimal
　　必须指定整数位max_digits和小数位decimal_places
8、models.EmailField　　字符串类型（正则表达式邮箱）=varchar
　　对字符串进行正则表达式
9、models.FloatField　　浮点类型= double
10、models.IntegerField　　整形
11、models.BigIntegerField　　长整形
　　integer_field_ranges ={
　　　　'SmallIntegerField':(-32768,32767),
　　　　'IntegerField':(-2147483648,2147483647),
　　　　'BigIntegerField':(-9223372036854775808,9223372036854775807),
　　　　'PositiveSmallIntegerField':(0,32767),
　　　　'PositiveIntegerField':(0,2147483647),
　　}
12、models.IPAddressField　　字符串类型（ip4正则表达式）
13、models.GenericIPAddressField　　字符串类型（ip4和ip6是可选的）
　　参数protocol可以是：both、ipv4、ipv6
　　验证时，会根据设置报错
14、models.NullBooleanField　　允许为空的布尔类型
15、models.PositiveIntegerFiel　　正Integer
16、models.PositiveSmallIntegerField　　正smallInteger
17、models.SlugField　　减号、下划线、字母、数字
18、models.SmallIntegerField　　数字
　　数据库中的字段有：tinyint、smallint、int、bigint
19、models.TextField　　字符串=longtext
20、models.TimeField　　时间 HH:MM[:ss[.uuuuuu]]
21、models.URLField　　字符串，地址正则表达式
22、models.BinaryField　　二进制
23、models.ImageField图片
24、models.FilePathField文件
1、null=True
　　数据库中字段是否可以为空
2、blank=True
　　django的Admin中添加数据时是否可允许空值
3、primary_key =False
　　主键，对AutoField设置主键后，就会代替原来的自增 id 列
4、auto_now 和 auto_now_add
　　auto_now 自动创建---无论添加或修改，都是当前操作的时间
　　auto_now_add 自动创建---永远是创建时的时间
5、choices
GENDER_CHOICE =(
(u'M', u'Male'),
(u'F', u'Female'),
)
gender = models.CharField(max_length=2,choices = GENDER_CHOICE)
6、max_length
7、default　　默认值
8、verbose_name　　Admin中字段的显示名称
9、name|db_column　　数据库中的字段名称
10、unique=True　　不允许重复
11、db_index =True　　数据库索引
12、editable=True　　在Admin里是否可编辑
13、error_messages=None　　错误提示
14、auto_created=False　　自动创建
15、help_text　　在Admin中提示帮助信息
16、validators=[]
17、upload-to
"""


# -*- coding: utf-8 -*-
from django.contrib import admin
from django.utils.text import capfirst
from django.utils.datastructures import SortedDict

def find_model_index(name):
    count = 0
    for model, model_admin in admin.site._registry.items():
        if capfirst(model._meta.verbose_name_plural) == name:
            return count
        else:
            count += 1
    return count

def index_decorator(func):
    def inner(*args, **kwargs):
        templateresponse = func(*args, **kwargs)
        for app in templateresponse.context_data['app_list']:
            app['models'].sort(key=lambda x: find_model_index(x['name']))
        return templateresponse
    return inner

registry = SortedDict()
registry.update(admin.site._registry)
admin.site._registry = registry
admin.site.index = index_decorator(admin.site.index)
admin.site.app_index = index_decorator(admin.site.app_index)
#admin.site.register(yourmodel, yourmodeladmin)





